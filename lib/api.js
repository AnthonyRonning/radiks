"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.destroyModel = exports.fetchCentral = exports.saveCentral = exports.find = exports.checkPayReq = exports.sendNewGaiaUrlLN = exports.sendNewGaiaUrl = void 0;

var _qs = require("qs");

var _config = require("./config");

const sendNewGaiaUrl = async gaiaURL => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/models/crawl`; // console.log(url, gaiaURL);

  const data = {
    gaiaURL
  };
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  const {
    success,
    message
  } = await response.json();

  if (!success) {
    throw new Error(`Error when saving model: '${message}'`);
  }

  return message;
};

exports.sendNewGaiaUrl = sendNewGaiaUrl;

const sendNewGaiaUrlLN = async gaiaURL => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/models/crawl/ln`; // console.log(url, gaiaURL);

  const data = {
    gaiaURL
  };
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  const {
    success,
    message
  } = await response.json();

  if (!success) {
    throw new Error(`Error when saving model: '${message}'`);
  }

  return message;
};

exports.sendNewGaiaUrlLN = sendNewGaiaUrlLN;

const checkPayReq = async payReqId => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/models/ln/${payReqId}`; // console.log(url, gaiaURL);

  const response = await fetch(url, {
    method: 'GET',
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  return await response.json();
};

exports.checkPayReq = checkPayReq;

const find = async query => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)(query, {
    arrayFormat: 'brackets',
    encode: false
  });
  const url = `${apiServer}/radiks/models/find?${queryString}`;
  const response = await fetch(url);
  const data = await response.json();
  return data;
};

exports.find = find;

const saveCentral = async data => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const url = `${apiServer}/radiks/central`;
  const response = await fetch(url, {
    method: 'POST',
    body: JSON.stringify(data),
    headers: new Headers({
      'Content-Type': 'application/json'
    })
  });
  const {
    success
  } = await response.json();
  return success;
};

exports.saveCentral = saveCentral;

const fetchCentral = async (key, username, signature) => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)({
    username,
    signature
  });
  const url = `${apiServer}/radiks/central/${key}?${queryString}`;
  const response = await fetch(url);
  const value = await response.json();
  return value;
};

exports.fetchCentral = fetchCentral;

const destroyModel = async model => {
  const {
    apiServer
  } = (0, _config.getConfig)();
  const queryString = (0, _qs.stringify)({
    signature: model.attrs.radiksSignature
  });
  const url = `${apiServer}/radiks/models/${model._id}?${queryString}`;
  const response = await fetch(url, {
    method: 'DELETE'
  });
  const data = await response.json();
  console.log(data);
  return data.success;
};

exports.destroyModel = destroyModel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,